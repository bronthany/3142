library(dplyr)
library(ggplot2)
library(lubridate)
library(data.table)
library(tidyr)
library(stringr)
library(Metrics)
library(AER)
library(pscl)
library(MASS)

data <- read.csv("ACTL31425110AssignmentData2022.csv", header = TRUE, stringsAsFactors = TRUE)
importindex <- read.csv("import.index.csv", header = TRUE)
CPI <- read.csv("CPI_data.csv", header = TRUE)
petrol_prices <- read.csv("petrol_price_quarter.csv", header = TRUE)
gas_perstate <- read.csv("petrol and diesel consumption.csv", header = TRUE)
gas <- read.csv("gas.csv", header = TRUE)
motor_sales <- read.csv("motor_vehicle_sales.csv", header = TRUE)
gold <- read.csv("GoldData.csv", header = TRUE)
road_deaths <- read.csv("Road_Deaths.csv", header = TRUE)
unemployment <- read.csv("unemploymentrate.csv", header = TRUE)
maintenance <- read.csv("data_petrol.csv", header = TRUE)
USDAUD <- read.csv("PriceHistoryAUDUSD.csv", header = TRUE)
JPYAUD <- read.csv("PriceHistoryJPYAUD.csv", header = TRUE)
CNYAUD <- read.csv("PriceHistoryCNYAUD.csv", header = TRUE)
regions <- read.csv("postcodes.csv", header = TRUE, stringsAsFactors = TRUE)


data$accident_month <- as.Date(data$accident_month)
data$claim_loss_date <- as.Date(data$claim_loss_date)
data$term_start_date <- as.Date(data$term_start_date)
data$term_expiry_date <- as.Date(data$term_expiry_date)
summary(data)


#### CLEANING ####
data <- data.table(data)
data <- data[!duplicated(data),] # Duplicates removed
data$total_claims_cost[is.na(data$total_claims_cost)] <- 0 #Convert NA's to 0
data[, quarter := year(data$accident_month) + quarter(data$accident_month)*0.1] # Add year.quarter
data <- data %>% mutate(vehicle_risk = case_when(
  vehicle_class %in% c("Class 2", "Class 4", "Class 5", "Class 9", "Class 15") ~ "Low Risk Vehicle",
  vehicle_class %in% c("Class 1", "Class 6", "Class 7", "Class 8", "Class 10") ~ "Medium Risk Vehicle",
  TRUE ~ "High Risk Vehicle"
)) # Add Vehicle Risk Class (i.e. combining Vehicle Classes)
data$vehicle_risk <- as.factor(data$vehicle_risk)

#Creating Seasonality Predictor
seasonality <- function(period){
  time <- (period-floor(period))*10
  return(time)
}

data <- data[,Season:= paste("Q",as.character(round(seasonality(data$quarter),1)), sep="")]


### EXTERNAL DATA ####

# Merge CPI and Import Index
CPI <- rbind(CPI, data.frame(X = 21, Date = "2021-06-01", CPI.Index = 118.8))
external <- merge(CPI, importindex, by = "Date")
cor(external$CPI.Index, external$Index.numbers) # 0.7475

external <- external %>%
  mutate(quarter = year(Date) + quarter(Date)*0.1) %>%
  dplyr :: select(-c(X)) %>%
  rename("import_index" = Index.numbers,
         "CPI_index" = CPI.Index) %>%   # Convert date to year.quarter
  mutate("lag_CPI_index" = lag(CPI_index)) # Add lagged CPI by 1 quarter
 

# Merge Petrol Prices 
names(petrol_prices)[2] = "quarter"
petrol_prices <- petrol_prices %>%
  mutate("lag_petrol_price" = lag(petrol_price)) # Add lagged petrol price by 1 quarter

external <- merge(external, petrol_prices[, -1], by = "quarter")

# Merge Motor Vehicle Sales
motor_sales[c("Month", "Year")] <- str_split_fixed(motor_sales$Date, "-", 2)
motor_sales[c("quarter")] <- ifelse(motor_sales$Month == "Jan" | motor_sales$Month == "Feb" | motor_sales$Month == "Mar", 1,
                                    ifelse(motor_sales$Month == "Apr" | motor_sales$Month == "May" | motor_sales$Month == "Jun", 2,
                                           ifelse(motor_sales$Month == "Jul" | motor_sales$Month == "Aug" | motor_sales$Month == "Sep", 3,
                                                  ifelse(motor_sales$Month == "Oct" | motor_sales$Month == "Nov" | motor_sales$Month == "Dec", 4, NA)))
                                    )
motor_sales[c("quarter")] <- motor_sales$quarter * 0.1 + as.numeric(motor_sales$Year)
  # Data is monthly. Sum motor vehicle sales by quarter to get quarterly value
motor_sales <- motor_sales %>% 
  group_by(quarter) %>%
  summarise(Units = sum(Units)) %>%
  rename("vehicle_sales" = Units) %>%
  mutate("lag_vehicle_sales" = lag(vehicle_sales))
  # Merge into external data set
external <- merge(external, motor_sales, by = "quarter")

# Merge Diesel and Petrol Consumption
summary(gas_perstate)

gas_perstate[c("Month", "Year")] <- str_split_fixed(gas_perstate$Month, "-", 2)
gas_perstate[c("quarter")] <- ifelse(gas_perstate$Month == "Jan" | gas_perstate$Month == "Feb" | gas_perstate$Month == "Mar", 1,
                                     ifelse(gas_perstate$Month == "Apr" | gas_perstate$Month == "May" | gas_perstate$Month == "Jun", 2,
                                            ifelse(gas_perstate$Month == "Jul" | gas_perstate$Month == "Aug" | gas_perstate$Month == "Sep", 3,
                                                   ifelse(gas_perstate$Month == "Oct" | gas_perstate$Month == "Nov" | gas_perstate$Month == "Dec", 4, NA)))
)
gas_perstate[c("quarter")] <- gas_perstate$quarter * 0.1 + as.numeric(gas_perstate$Year) + 2000

gas_perstate <- gas_perstate %>%
  group_by(risk_state_name, quarter) %>%
  summarise(gas_used = sum(Diesel_petrol_total),
            automotivegas = sum(Automotive.gasoline))


# Percent Change Gas
gas[c("Month", "Year")] <- str_split_fixed(gas$Month, " ", 2)
gas[c("quarter")] <- ifelse(gas$Month == "Jan" | gas$Month == "Feb" | gas$Month == "Mar", 1,
                            ifelse(gas$Month == "Apr" | gas$Month == "May" | gas$Month == "Jun", 2,
                                   ifelse(gas$Month == "Jul" | gas$Month == "Aug" | gas$Month == "Sep", 3,
                                          ifelse(gas$Month == "Oct" | gas$Month == "Nov" | gas$Month == "Dec", 4, NA))))
gas[c("quarter")] <- gas$quarter*0.1 + as.numeric(gas$Year)
gas <- gas %>%
  group_by(quarter) %>%
  summarise(gas = sum(Automotive.gasoline.total)) %>%
  mutate(gas_change = (gas/lag(gas)-1)*100,
         standardgas = gas/sd(gas),
         loggas = log(gas))
external <- merge(external, gas[c("quarter", "gas_change", "standardgas", "loggas")], by = "quarter")

# Merge Gold data
gold[c("Day", "Month", "Year")] <- str_split_fixed(gold$Quarter, "/", 3)  # Split date into time periods
gold[c("quarter")] <- as.numeric(gold$Year) + 0.1*(as.numeric(gold$Month)/3) + 2000 # Transform dates to year.quarter
colnames(gold)[2] <- "gold" 
gold[c("lag_gold")] <- lag(gold$gold) # Lag Gold
external <- merge(external, gold[c("quarter", "gold", "lag_gold")], by = "quarter")

# Merge Road Deaths data
road_deaths[c("Day", "Month", "Year")] <- str_split_fixed(road_deaths$Quarter, "/", 3)  # Split date into time periods
road_deaths[c("quarter")] <- as.numeric(road_deaths$Year) + 0.1*(as.numeric(road_deaths$Month)/3) # Transform dates to year.quarter
colnames(road_deaths)[2] <- "road_deaths"
external <- merge(external, road_deaths[c("quarter", "road_deaths")], by = "quarter")

# Merge Unemployment data
unemployment[c("Day", "Month", "Year")] <- str_split_fixed(unemployment$Quarter, "/", 3)  # Split date into time periods
unemployment[c("quarter")] <- as.numeric(unemployment$Year) + 0.1*(as.numeric(unemployment$Month)/3) # Transform dates to year.quarter
colnames(unemployment)[2] <- "unemployment"
unemployment[c("lag_unemployment")] <- lag(unemployment$unemployment) # Lag unemployment
external <- merge(external, unemployment[c("quarter", "unemployment", "lag_unemployment")], by = "quarter")

# Merge Maintenance and Repair Index
maintenance[c("Day", "Month", "Year")] <- str_split_fixed(maintenance$Date, "/", 3)  # Split date into time periods
maintenance[c("quarter")] <- as.numeric(maintenance$Year) + 2000 + 0.1*(as.numeric(maintenance$Month)/3) # Transform dates to year.quarter
colnames(maintenance)[8] <- "maintenance_index"
external <- merge(external, maintenance[c("quarter", "maintenance_index")], by = "quarter")

# Merge USD/AUD exchange rate
USDAUD[c("Month", "Day", "Year")] <- str_split_fixed(USDAUD$Date, "/", 3)  # Split date into time periods
USDAUD[c("quarter")] <- as.numeric(USDAUD$Year) + 2000 + 0.1*(as.numeric(USDAUD$Month)/3) # Transform dates to year.quarter
colnames(USDAUD)[2] <- "USDAUD"
external <- merge(external, USDAUD[c("quarter", "USDAUD")], by = "quarter")

# Merge JPY/AUD exchange rate
JPYAUD[c("Month", "Day", "Year")] <- str_split_fixed(JPYAUD$Date, "/", 3)  # Split date into time periods
JPYAUD[c("quarter")] <- as.numeric(JPYAUD$Year) + 2000 + 0.1*(as.numeric(JPYAUD$Month)/3) # Transform dates to year.quarter
colnames(JPYAUD)[2] <- "JPYAUD"
external <- merge(external, JPYAUD[c("quarter", "JPYAUD")], by = "quarter")

# Merge CNY/AUD exchange rate
CNYAUD[c("Month", "Day", "Year")] <- str_split_fixed(CNYAUD$Date, "/", 3)  # Split date into time periods
CNYAUD[c("quarter")] <- as.numeric(CNYAUD$Year) + 2000 + 0.1*(as.numeric(CNYAUD$Month)/3) # Transform dates to year.quarter
colnames(CNYAUD)[2] <- "CNYAUD"
external <- merge(external, CNYAUD[c("quarter", "CNYAUD")], by = "quarter")

# Frequency vs Severity variables
freq <- c("Date")
severity <- c("Date")

# Assign Postcodes to each Region
regions <- regions %>% mutate(region = case_when(
  RA_NAME_2016 %in% c("Very Remote Australia", "Remote Australia") ~ "Remote Australia", #Combine Remote Classifications
  TRUE ~ as.character(RA_NAME_2016) 
)) %>%
  rename("risk_postcode" = POSTCODE_2017) %>%
  group_by(risk_postcode, region) %>% 
  summarise(RATIO = sum(RATIO)) %>% 
  mutate(chosen = RATIO > 0.5) #If postcodes have multiple regions, assign postcode to region with highest proportion
regions <- regions[regions$chosen, ]

postcode <- unique(data$risk_postcode)
postcode <- data.table("risk_postcode" = unique(data$risk_postcode))
postcode <- merge(postcode, regions[c("risk_postcode", "region")], by = "risk_postcode") #Assign region to each postcode

data <- data %>%
  mutate(risk_postcode = case_when(
    risk_postcode == 4219 ~ 4220, # 4219 did not have a region, but in the same area as 4220
    risk_postcode == 6331 ~ 6330, # 6331 is same suburb as 6330
    TRUE ~ as.numeric(risk_postcode)
  ))
data <- merge(data, postcode, by = c("risk_postcode"))




#################
###### EDA ######
#################

# Regions EDA
# Quarterly Analysis
data.eda <- data.table(data)

data.region.quarter <- data.eda[, .(totalclaims = sum(total_claims_cost),
                                      frequency = sum(total_claims_cost != 0),
                                      policies = length(unique(policy_id)),
                                      Date = last(accident_month)), 
                                  by = .(region, quarter)
                                  ][, severity := totalclaims/frequency
                                    ][, freqprop := frequency/policies]
ggplot(data.region.quarter, aes(x = Date, y = severity , color = region)) + # SEVERITY
  geom_line() +
  labs(title = "Each Region follows their own Trend", x = "Date", y = "Average Severity") +
  theme(axis.title.x = element_text(margin = margin(t = 10), size = 10),
        axis.title.y = element_text(margin = margin(r = 10), size = 10),
        plot.title = element_text(size = 10, hjust = 0.5))


ggplot(data.region.quarter, aes(x = Date, y = freqprop , color = region)) + # FREQUENCY
  geom_line() + 
  labs(title = "Major Cities have highest frequency followed by Remote", x = "Date", y = "Frequency per person") +
  theme(axis.title.x = element_text(margin = margin(t = 10), size = 10),
        axis.title.y = element_text(margin = margin(r = 10), size = 10),
        plot.title = element_text(size = 10, hjust = 0.5))

# Vehicle Risk EDA

vehicle <- data.eda[, .(total = sum(total_claims_cost), policies = length(unique(policy_id))),
                    by = .(vehicle_class)][, risk := total/policies]
vehicle <- vehicle[order(vehicle$risk),][, group := as.factor(rep(1:3, each = 5))]

ggplot(vehicle, aes(x = vehicle_class, y = risk, fill = group)) +
  geom_col() + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, margin = margin(t = 10), size = 10),
        axis.title.y = element_text(margin = margin(r = 10), size = 10),
        plot.title = element_text(size = 10, hjust = 0.5)) +
  labs(x = "Vehicle Class", y = "Expected Loss per Policy", title = "3 Distinct Risk Classes",
       fill = "Risk Classes") +
  scale_fill_discrete(labels = c("Low Risk", "Medium Risk", "High Risk"))




d1 <- data
d1$Indicator <- ifelse(!d1$total_claims_cost == 0, 1, 0) # Indicator, 1 if claim, 0 if no claim
d1 <- d1 %>% 
  group_by(policy_id, accident_month) %>%
  mutate(Claim_number = sum(Indicator)) # Calculate total claim number per month per policy
d1 <- d1[!d1$exposure == 0,] # Remove 0 exposure entries

# Transforming frequency dataset to quarterly data
quarterly.d1 <- d1 %>%
  group_by(policy_id, quarter) %>%
  summarise(exposure = sum(exposure), 
            Claim_number = sum(Claim_number),
            Indicator = last(Indicator),
            risk_state_name = last(risk_state_name),
            vehicle_class = last(vehicle_class),
            policy_tenure = last(policy_tenure),
            vehicle_risk = last(vehicle_risk),
            sum_insured = last(sum_insured),
            year_of_manufacture = last(year_of_manufacture),
            region = last(region),
            q = last(Season),
            Date = max(accident_month))

hist(quarterly.d1$Claim_number)
table(quarterly.d1$Claim_number)  #  0      1      2      3      4      5      6 
                              # 390180   5481    869     49     43      1      3 

# Combining External data -- #
quarterly.d1 <- merge(quarterly.d1, external[, !colnames(external) %in% severity], by = "quarter")
quarterly.d1 <- quarterly.d1 %>%
  mutate(state_level = case_when(
    risk_state_name == "NT" ~ "Other",
    risk_state_name == "WA" ~ "Other",
    TRUE ~ as.character(risk_state_name)
  ))

quarterly.d1 <- merge(quarterly.d1, gas_perstate[c("quarter", "risk_state_name", "automotivegas", "gas_used")], by = c("quarter", "risk_state_name"))

#### SEVERITY DATA TRANSFORMATION ####

# Change Severity Data set into quarters, remove no claim entries
d2 <- data %>% filter(total_claims_cost != 0) # Severity data set only has claims
quarterly.d2 <- d2 %>%
  group_by(policy_id, quarter) %>%
  summarise(Mean_claim_amount = mean(total_claims_cost),
            risk_state_name = last(risk_state_name),
            vehicle_class = last(vehicle_class),
            policy_tenure = last(policy_tenure),
            sum_insured = last(sum_insured),
            year_of_manufacture = last(year_of_manufacture),
            vehicle_risk = last(vehicle_risk),
            region = last(region),
            Date = max(accident_month))
quarterly.d2 <- quarterly.d2[quarterly.d2$Mean_claim_amount < quantile(quarterly.d2$Mean_claim_amount,0.99),] # Remove outliers
ggplot(quarterly.d2, aes(x = Mean_claim_amount)) +
  geom_histogram(fill = "black", colour = "black", binwidth = 2000)

# Combining External data -- #
quarterly.d2 <- merge(quarterly.d2, external[, !colnames(external) %in% freq], by = "quarter")
quarterly.d2 <- quarterly.d2 %>% mutate(state_group = case_when(
  risk_state_name == "NSW" ~ "NSW",
  risk_state_name == "VIC" ~ "VIC",
  risk_state_name == "QLD" ~ "QLD",
  TRUE ~ "Other"
)) # Grouping States based off preliminary modelling results

quarterly.d2 <- merge(quarterly.d2, gas_perstate[c("quarter", "risk_state_name", "automotivegas", "gas_used")], by = c("quarter", "risk_state_name"))

quartclaim <- quarterly.d1 %>%
  group_by(quarter) %>% summarise(QuarterlyClaim = sum(Claim_number))

quarterly.d2 <- full_join(quarterly.d2, quartclaim, by = "quarter")

quarterly.d2 <- merge(quarterly.d2, quarterly.d1[c("policy_id", "quarter", "Claim_number")], by = c("quarter", "policy_id"))

quarterly.d2 <- full_join(quarterly.d2, quartclaim, by = "quarter")

quarterly.d2 <- merge(quarterly.d2, quarterly.d1[c("policy_id", "quarter", "Claim_number")], by = c("quarter", "policy_id"))


